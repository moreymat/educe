#!/usr/bin/env python
# -*- coding: utf-8 -*-

# pylint: disable=invalid-name
# We have a script here, not a module, so it's ok to have
# a funny name
# pylint: enable=invalid-name
#
# Author: Eric Kow
# License: BSD3

"""
Example script using the library to dump graphs for all files
in a STAC corpus
"""
from __future__ import print_function

import argparse
import os.path
import sys
import codecs

from educe import stac, util, graph
from educe.util import add_corpus_filters, fields_without
import educe.stac.graph as stacgraph


PRESELECTED_STAGE = ["discourse", "units"]

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------

def write_dot_graph(doc_file, dot_graph, part=None):
    doc_dir = os.path.dirname(doc_file)
    ofile_dirname = os.path.join(args.odir,
                                 os.path.relpath(doc_dir, args.idir))
    ofile_basename = os.path.splitext(os.path.basename(doc_file))[0]
    if part is not None:
        ofile_basename += '_' + str(part)
    dot_file = os.path.join(ofile_dirname, ofile_basename + '.dot')
    png_file = os.path.join(ofile_dirname, ofile_basename + '.png')
    if not os.path.exists(ofile_dirname):
        os.makedirs(ofile_dirname)
    with codecs.open(dot_file, 'w', encoding='utf-8') as f:
        print(dot_graph.to_string(), file=f)
    if not args.no_png:
        print("Creating %s" % png_file, file=sys.stderr)
        os.system('dot -T png -o %s %s' % (png_file, dot_file))

def main_rel_graph(args):
    is_interesting = util.mk_is_interesting(args,
                                            preselected=PRESELECTED_STAGE)

    if args.live:
        reader = stac.LiveInputReader(args.idir)
        anno_files = reader.files()
        corpus = reader.slurp(anno_files, verbose=True)
    else:
        reader = stac.Reader(args.idir)
        anno_files = reader.filter(reader.files(), is_interesting)
        corpus = reader.slurp(anno_files, verbose=True)

    if args.live:
        keys = corpus
    else:
        keys = [k for k in corpus if k.stage == 'discourse']

    for k in sorted(keys):
        doc_file = anno_files[k][0]
        try:
            g_ = stacgraph.Graph.from_doc(corpus, k)
            if args.strip_cdus:
                g = g_.without_cdus()
            else:
                g = g_
            dot_g = stacgraph.DotGraph(g)
            if dot_g.get_nodes():
                write_dot_graph(doc_file, dot_g)
                if args.split:
                    ccs = g.connected_components()
                    for k, nodes in enumerate(ccs, 1):
                        g2 = g.copy(nodes)
                        write_dot_graph(doc_file, stacgraph.DotGraph(g2),
                                        part=k)
            else:
                print("Skipping %s (empty graph)" % doc_file, file=sys.stderr)
        except graph.DuplicateIdException:
            warning = "WARNING: %s has duplicate annotation ids" % doc_file
            print(warning, file=sys.stderr)


def main_enclosure_graph(args):
    is_interesting = util.mk_is_interesting(args,
                                            preselected=PRESELECTED_STAGE)

    if args.live:
        reader = stac.LiveInputReader(args.idir)
        anno_files = reader.files()
        corpus = reader.slurp(anno_files, verbose=True)
    else:
        reader = stac.Reader(args.idir)
        anno_files = reader.filter(reader.files(), is_interesting)
        corpus = reader.slurp(anno_files, verbose=True)

    if args.live:
        keys = corpus
    else:
        keys = [k for k in corpus if k.stage == 'units']

    for k in sorted(keys):
        doc_file = anno_files[k][0]
        g_ = graph.EnclosureGraph(corpus[k].units)
        if args.reduce:
            g_.reduce()
        dot_g = graph.EnclosureDotGraph(g_)
        if dot_g.get_nodes():
            write_dot_graph(doc_file, dot_g)
        else:
            print("Skipping %s (empty graph)" % doc_file, file=sys.stderr)

# ---------------------------------------------------------------------
# args
# ---------------------------------------------------------------------

arg_parser = argparse.ArgumentParser(
    description='Visualise discourse graphs.')
arg_parser.add_argument('idir', metavar='DIR',
                        help='Input directory')
arg_parser.add_argument('odir', metavar='DIR',
                        help='Output directory')
arg_parser.add_argument('--no-png', action='store_true',
                        help='Skip png file creation')
arg_parser.add_argument('--live', action='store_true',
                        help='Input is a flat collection of aa/ac files)')

# TODO: would be nice to enforce these groups of args mutually excluding
# but not sure if the library actually supports it
arg_parser_rel = arg_parser.add_argument_group("relation graphs")
arg_parser_rel.add_argument('--split', action='store_true',
                            help='Separate file for each connected component')
arg_parser_rel.add_argument('--strip-cdus', action='store_true',
                            help='Strip away CDUs (substitute w heads)')

arg_parser_enc = arg_parser.add_argument_group("enclosure graphs")
arg_parser_enc.add_argument('--enclosure', action='store_true',
                            help='Generate enclosure graphs')
arg_parser_enc.add_argument('--reduce', action='store_true',
                            help='Reduce enclosure graphs [requires --enclosure]')

educe_group = arg_parser.add_argument_group('corpus filtering arguments')
add_corpus_filters(educe_group, fields=fields_without(["stage"]))
args = arg_parser.parse_args()

if args.enclosure:
    main_enclosure_graph(args)
else:
    main_rel_graph(args)

# vim: syntax=python:
